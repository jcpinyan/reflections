When would you want to use a remote repository rather than keeping all your work
local?

    If you are going to work on a project from multiple computers, it is good to
have the remote repository. Also if you are going to share your project with
someone else, it is helpful.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You might not want a new feature in your repository yet because you are
working on something else.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A branch is part of your repository. It is a place where you split off from
some earlier commit and headed off in a new direction. A clone is a copy of a
repository that you keep in a different place. That repository is made of
branches. If you have a clone, you have the origin somewhere else, and changes
you make in one place you push/pull to the other. The goal is to keep those two
repositories the same. A fork is a copy of a repository that you have made.
Here, the intent is to take advantage of what was done previously, perhaps by
someone else, but to go off on your own with it because you do not have
permission to change the original repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    If you have a local copy of the last known state  of the remote, you can
work on merging whatever it contains with the changes you were already working
on locally. Then when it is all sorted out, and you have internet access again,
you can push to the remote repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    The way I do now. Making copies of files for people and then when they send
me changes, working those changes into the master copy I keep. I do use diff
sometimes to do that, which is similar to how git lets you compare things. In
some ways, this is easier, because I don't have to try to get them to use a new
system that they don't feel like learning. But in other ways, maybe you could
consider it harder because there is potentially some redundancy. Or maybe there
is an opportunity for different versions to get mixed up with each other.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I think I would make changes in a separate branch if I wanted to make sure
master was there by itself, pristinely working, for me to be able to have
someone else using the code. Then I would merge my other branch into master when
I was releasing a new update. I cannot wrap my head around doing all this with
another programmer making changes.
    I would need to pull my partner's changes into my local master branch, then
merge my local master with my working branch, then push my working branch to the
remote, and then merge my working branch into master. Those are the steps
described in the class. But they are not intuitive to me right now. So I would
be disinclined to do this without a partner who was already very fluent in Git
and GitHub and could hold my hand through these steps a few dozen times.
