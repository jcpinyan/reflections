What happens when you initialize a repository? Why do you need to do it?

    When you initialize a repository, git makes the .git subdirectory to track
everything. It creates the bare bones for you to add your initial files to it.
However, nothing is commited in the initialization process. You'll still need to
commit the files you want to track. To start the repository, git init. To check
on it, git status.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is transitional, whereas the working directory holds
all sorts of things we change and depend on. The repository is snapshots in
time. The staging area is ephemeral, with no memory of what was ever there. I'm
not really sure what value it offers, other than having you think twice before
you commit.

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
